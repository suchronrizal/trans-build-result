(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{knzv:function(e,t,a){"use strict";a.r(t);var n=a("cDcd"),r=a.n(n),s=a("h74D"),i=a("17x9"),o=a.n(i),c=a("je4i"),l=a.n(c),p=a("Vl3Y"),u=a("2fM7"),d=a("QbLZ"),m=a.n(d),h=a("jo6Y"),f=a.n(h),y=a("iCc5"),g=a.n(y),E=a("FYw3"),S=a.n(E),b=a("mRg0"),v=a.n(b),D=a("faye"),x=a("TSYQ"),N=a.n(x),w=a("sEfC"),P=a.n(w);function k(){if("undefined"!=typeof window&&window.document&&window.document.documentElement){var e=window.document.documentElement;return"flex"in e.style||"webkitFlex"in e.style||"Flex"in e.style||"msFlex"in e.style}return!1}var O=function(e){function t(a){g()(this,t);var n=S()(this,e.call(this,a));return n.calcStepOffsetWidth=function(){if(!k()){var e=Object(D.findDOMNode)(n);e.children.length>0&&(n.calcTimeout&&clearTimeout(n.calcTimeout),n.calcTimeout=setTimeout(function(){var t=(e.lastChild.offsetWidth||0)+1;n.state.lastStepOffsetWidth===t||Math.abs(n.state.lastStepOffsetWidth-t)<=3||n.setState({lastStepOffsetWidth:t})}))}},n.state={flexSupported:!0,lastStepOffsetWidth:0},n.calcStepOffsetWidth=P()(n.calcStepOffsetWidth,150),n}return v()(t,e),t.prototype.componentDidMount=function(){this.calcStepOffsetWidth(),k()||this.setState({flexSupported:!1})},t.prototype.componentDidUpdate=function(){this.calcStepOffsetWidth()},t.prototype.componentWillUnmount=function(){this.calcTimeout&&clearTimeout(this.calcTimeout),this.calcStepOffsetWidth&&this.calcStepOffsetWidth.cancel&&this.calcStepOffsetWidth.cancel()},t.prototype.render=function(){var e,t=this.props,a=t.prefixCls,s=t.style,i=void 0===s?{}:s,o=t.className,c=t.children,l=t.direction,p=t.labelPlacement,u=t.iconPrefix,d=t.status,h=t.size,y=t.current,g=t.progressDot,E=t.initial,S=t.icons,b=f()(t,["prefixCls","style","className","children","direction","labelPlacement","iconPrefix","status","size","current","progressDot","initial","icons"]),v=this.state,D=v.lastStepOffsetWidth,x=v.flexSupported,w=r.a.Children.toArray(c).filter(function(e){return!!e}),P=w.length-1,k=g?"vertical":p,O=N()(a,a+"-"+l,o,((e={})[a+"-"+h]=h,e[a+"-label-"+k]="horizontal"===l,e[a+"-dot"]=!!g,e[a+"-flex-not-supported"]=!x,e));return r.a.createElement("div",m()({className:O,style:i},b),n.Children.map(w,function(e,t){if(!e)return null;var r=E+t,s=m()({stepNumber:""+(r+1),prefixCls:a,iconPrefix:u,wrapperStyle:i,progressDot:g,icons:S},e.props);return x||"vertical"===l||t===P||(s.itemWidth=100/P+"%",s.adjustMarginRight=-Math.round(D/P+1)),"error"===d&&t===y-1&&(s.className=a+"-next-error"),e.props.status||(s.status=r===y?d:r<y?"finish":"wait"),Object(n.cloneElement)(e,s)}))},t}(n.Component);O.propTypes={prefixCls:o.a.string,className:o.a.string,iconPrefix:o.a.string,direction:o.a.string,labelPlacement:o.a.string,children:o.a.any,status:o.a.string,size:o.a.string,progressDot:o.a.oneOfType([o.a.bool,o.a.func]),style:o.a.object,initial:o.a.number,current:o.a.number,icons:o.a.shape({finish:o.a.node,error:o.a.node})},O.defaultProps={prefixCls:"rc-steps",iconPrefix:"rc",direction:"horizontal",labelPlacement:"horizontal",initial:0,current:0,status:"process",size:"",progressDot:!1};var R=O;function C(e){return"string"==typeof e}var I=function(e){function t(){return g()(this,t),S()(this,e.apply(this,arguments))}return v()(t,e),t.prototype.renderIconNode=function(){var e,t=this.props,a=t.prefixCls,n=t.progressDot,s=t.stepNumber,i=t.status,o=t.title,c=t.description,l=t.icon,p=t.iconPrefix,u=t.icons,d=N()(a+"-icon",p+"icon",((e={})[p+"icon-"+l]=l&&C(l),e[p+"icon-check"]=!l&&"finish"===i&&u&&!u.finish,e[p+"icon-close"]=!l&&"error"===i&&u&&!u.error,e)),m=r.a.createElement("span",{className:a+"-icon-dot"});return n?"function"==typeof n?r.a.createElement("span",{className:a+"-icon"},n(m,{index:s-1,status:i,title:o,description:c})):r.a.createElement("span",{className:a+"-icon"},m):l&&!C(l)?r.a.createElement("span",{className:a+"-icon"},l):u&&u.finish&&"finish"===i?r.a.createElement("span",{className:a+"-icon"},u.finish):u&&u.error&&"error"===i?r.a.createElement("span",{className:a+"-icon"},u.error):l||"finish"===i||"error"===i?r.a.createElement("span",{className:d}):r.a.createElement("span",{className:a+"-icon"},s)},t.prototype.render=function(){var e,t=this.props,a=t.className,n=t.prefixCls,s=t.style,i=t.itemWidth,o=t.status,c=void 0===o?"wait":o,l=(t.iconPrefix,t.icon),p=(t.wrapperStyle,t.adjustMarginRight),u=(t.stepNumber,t.description),d=t.title,h=(t.progressDot,t.tailContent),y=(t.icons,f()(t,["className","prefixCls","style","itemWidth","status","iconPrefix","icon","wrapperStyle","adjustMarginRight","stepNumber","description","title","progressDot","tailContent","icons"])),g=N()(n+"-item",n+"-item-"+c,a,((e={})[n+"-item-custom"]=l,e)),E=m()({},s);return i&&(E.width=i),p&&(E.marginRight=p),r.a.createElement("div",m()({},y,{className:g,style:E}),r.a.createElement("div",{className:n+"-item-tail"},h),r.a.createElement("div",{className:n+"-item-icon"},this.renderIconNode()),r.a.createElement("div",{className:n+"-item-content"},r.a.createElement("div",{className:n+"-item-title"},d),u&&r.a.createElement("div",{className:n+"-item-description"},u)))},t}(r.a.Component);I.propTypes={className:o.a.string,prefixCls:o.a.string,style:o.a.object,wrapperStyle:o.a.object,itemWidth:o.a.oneOfType([o.a.number,o.a.string]),status:o.a.string,iconPrefix:o.a.string,icon:o.a.node,adjustMarginRight:o.a.oneOfType([o.a.number,o.a.string]),stepNumber:o.a.string,description:o.a.any,title:o.a.any,progressDot:o.a.oneOfType([o.a.bool,o.a.func]),tailContent:o.a.any,icons:o.a.shape({finish:o.a.node,error:o.a.node})};var T=I;R.Step=T;var A=R,U=a("CtXQ"),j=a("wEI+");function _(e){return(_="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function $(){return($=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e}).apply(this,arguments)}function W(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function V(e,t){return!t||"object"!==_(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function F(e){return(F=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function G(e,t){return(G=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var B=function(e){function t(){var e;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),(e=V(this,F(t).apply(this,arguments))).renderSteps=function(t){var a=t.getPrefixCls,r=a("steps",e.props.prefixCls),s=a("",e.props.iconPrefix),i={finish:n.createElement(U.a,{type:"check",className:"".concat(r,"-finish-icon")}),error:n.createElement(U.a,{type:"close",className:"".concat(r,"-error-icon")})};return n.createElement(A,$({icons:i},e.props,{prefixCls:r,iconPrefix:s}))},e}var a,r,s;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&G(e,t)}(t,n["Component"]),a=t,(r=[{key:"render",value:function(){return n.createElement(j.a,null,this.renderSteps)}}])&&W(a.prototype,r),s&&W(a,s),t}();B.Step=A.Step,B.defaultProps={current:0},B.propTypes={prefixCls:i.string,iconPrefix:i.string,current:i.number};var M=a("kLXV"),z=a("mr32"),q=a("wCAj"),L=a("BMrR"),Q=a("kPKH"),Y=a("5rEg"),H=a("2/Rp"),K=a("zr5I"),J=a.n(K),X=a("iho4");function Z(e){return function(){var t=e.apply(this,arguments);return new Promise(function(e,a){return function n(r,s){try{var i=t[r](s),o=i.value}catch(e){return void a(e)}if(!i.done)return Promise.resolve(o).then(function(e){n("next",e)},function(e){n("throw",e)});e(o)}("next")})}}const ee=localStorage.getItem("key"),te=()=>(()=>{var e=Z(function*(e){e({type:"DATA_REQUEST"})});return function(t){return e.apply(this,arguments)}})(),ae=e=>t=>{t({type:"ERROR",payload:e})};var ne=a("7cg7"),re=a("jDFS"),se=a("qvGC"),ie=a("T2ns"),oe=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e};const ce=p.a.Item,le=u.a.Option,{Step:pe}=B,ue=p.a.create()(e=>{const{modalVisible:t,handleModalVisible:a,formValues:n,formTitle:s,currentStep:i,renderContent:o,renderFooter:c}=e;return r.a.createElement(M.a,{visible:t,width:"700px",footer:c(i),title:[r.a.createElement("span",{key:l.a.generate()},r.a.createElement("h3",{className:"header-title mb-0"},`${s} USER MANAGEMENT`),r.a.createElement("small",{className:"small-3 header-title"},"Silahkan isi data yang sesuai"))],onCancel:()=>a()},r.a.createElement(B,{style:{marginBottom:28},size:"small",current:i},r.a.createElement(pe,{title:"User"}),r.a.createElement(pe,{title:"User Group"}),r.a.createElement(pe,{title:"Right"})),o(i,n))});class de extends n.PureComponent{constructor(e){super(e),this.componentDidMount=(()=>{this.props.listBranch(),this.props.listSales(),this.props.listUserGroup()}),this.handleNext=(e=>{const{form:t,handleUpdate:a}=this.props,{formValues:n}=this.state;t.validateFields((t,r)=>{if(t)return;const s=oe({},n,r);this.setState({formValues:s},()=>{e<2?this.forward():a(s)})})}),this.backward=(()=>{const{currentStep:e}=this.state;this.setState({currentStep:e-1})}),this.forward=(()=>{const{currentStep:e}=this.state;this.setState({currentStep:e+1})}),this.onSelectChange=(e=>{const{selectedRow:t}=this.state.formValues;this.setState({selectedRow:e})}),this.renderContent=((e,t)=>{const{form:a,branch:s,sales:i,userGroup:o}=this.props,c=o.listData,p=[{title:"Name",dataIndex:"name",key:"name"},{title:"Desc",dataIndex:"desc",key:"desc"},{title:"Status",dataIndex:"status",key:"status",className:"text-center",render:e=>{const t="Active"===e?"green":"volcano";return r.a.createElement(z.a,{color:t,key:e},e)}}],d=[];c.length>0&&c.map(e=>{d.push({key:e[0],name:e[1],desc:e[2],status:"A"===e[3]?"Active":"Terminated"})});const m=s.listData,h=i.listData,{selectedRowKeys:f}=this.state,y={selectedRowKeys:f,onChange:this.onSelectChange};return 1===e?[r.a.createElement(n.Fragment,null,r.a.createElement(q.a,{dataSource:d,className:"table-modal",columns:p,scroll:{y:340},rowSelection:y}))]:[r.a.createElement(n.Fragment,null,r.a.createElement(L.a,{gutter:25},r.a.createElement(Q.a,{span:25},r.a.createElement(ce,{style:{display:"none"}},a.getFieldDecorator("id",{initialValue:t.id||""})(r.a.createElement(Y.a,null))),r.a.createElement(ce,{label:"Name"},a.getFieldDecorator("Name",{rules:[{required:!0,message:"Please input your name!"}],initialValue:t.Name||""})(r.a.createElement(Y.a,{className:"form-control",size:"large",placeholder:"Name"}))))),r.a.createElement(L.a,{gutter:25},r.a.createElement(Q.a,{span:25},r.a.createElement(ce,{label:"Description"},a.getFieldDecorator("Description",{rules:[{required:!0,message:"Please input your description!"}],initialValue:t.Description||""})(r.a.createElement(Y.a,{className:"form-control",size:"large",placeholder:"Description",autoComplete:"Desc"}))))),r.a.createElement(L.a,{gutter:25},r.a.createElement(Q.a,{span:12},r.a.createElement(ce,{label:"Brach"},a.getFieldDecorator("BranchID",{rules:[{required:!0,message:"Please input your brach!"}],initialValue:t.BranchID||""})(r.a.createElement(u.a,{size:"large",placeholder:"Choose Branch",className:"w-100"},m.length>0&&m.map(e=>r.a.createElement(le,{key:l.a.generate(),value:e[0]},e[2])))))),r.a.createElement(Q.a,{span:12},r.a.createElement(ce,{label:"Sales"},a.getFieldDecorator("SalesID",{rules:[{required:!0,message:"Please input your brach!"}],initialValue:t.SalesID||""})(r.a.createElement(u.a,{size:"large",placeholder:"Choose Sales",className:"w-100"},h.length>0&&h.map(e=>r.a.createElement(le,{key:l.a.generate(),value:e[0]},e[1]))))))))]}),this.renderFooter=(e=>{const{handleUpdateModalVisible:t,values:a}=this.props;return 1===e?[r.a.createElement(H.a,{key:"back",type:"primary",style:{float:"left"},onClick:this.backward},"Back"),r.a.createElement(H.a,{key:"cancel",onClick:()=>t(!1,a)},"Cancel"),r.a.createElement(H.a,{key:"forward",type:"primary",onClick:()=>this.handleNext(e)},"Next Step")]:[r.a.createElement(H.a,{key:"cancel",onClick:()=>t(!1,a)},"Cancel"),r.a.createElement(H.a,{key:"forward",type:"primary",onClick:()=>this.handleNext(e)},"Next Step")]}),this.state={currentStep:0,formValues:{id:"",Name:"",Description:"",BranchID:"",SalesID:"",selectedRow:[]}},this.formLayout={labelCol:{span:7},wrapperCol:{span:13}}}render(){const e={renderContent:this.renderContent,renderFooter:this.renderFooter};return r.a.createElement(ue,oe({},this.props,this.state,e))}}de.columns=[{title:"Name",dataIndex:"name",key:"name",width:"200px",sorter:(e,t)=>e.name.length-t.name.length,sortDirections:["descend","ascend"]},{title:"Branch",dataIndex:"branchName",key:"branchName",width:"200px",sorter:(e,t)=>e.branchName.length-t.branchName.length,sortDirections:["descend","ascend"]},{title:"Sales",dataIndex:"salesName",key:"salesName",width:"200px",sorter:(e,t)=>e.salesName.length-t.salesName.length,sortDirections:["descend","ascend"]},{title:"Desc",dataIndex:"description",key:"description",width:"250px",sorter:(e,t)=>e.name.length-t.name.length,sortDirections:["descend","ascend"]},{title:"Status",dataIndex:"status",key:"status",className:"text-center",width:"100px",sorter:(e,t)=>e.status.length-t.status.length,sortDirections:["descend","ascend"],render:e=>{const t="Active"===e?"green":"volcano";return r.a.createElement(z.a,{color:t,key:e},e)}}],de.dataTable=(e=>{const t=[];return e.length>0&&e.map(e=>t.push({key:e[0],name:e[1],branchId:e[4],branchName:e[5],salesId:e[6],salesName:e[7],description:e[2],status:"A"===e[8]?"Active":"Terminated"})),t}),de.propTypes={listData:o.a.func.isRequired,saveData:o.a.func.isRequired,showData:o.a.func.isRequired,updateData:o.a.func.isRequired,deleteData:o.a.func.isRequired,listBranch:o.a.func.isRequired,listSales:o.a.func.isRequired,updateUserGroup:o.a.func.isRequired};t.default=Object(s.connect)(({user:e,branch:t,sales:a,userGroup:n})=>({data:e,branch:t,sales:a,userGroup:n}),{listUserGroup:se.b,updateUserGroup:e=>t=>{t(te());const a={x:"150",id:e,key:`${ee}`};J.a.post(`${X.API}:acl:user`,a).then(e=>{"200"===e.data.r?t({type:"SAVE_USER_GROUP",payload:e.data}):"401"===e.data.r&&t(ae(e.data.m))})},listBranch:ne.b,listSales:re.b,listData:e=>t=>{t(te());const a={x:"1",key:`${ee}`},n=Object.assign({},a,e);J.a.post(`${X.API}:acl:user`,n).then(e=>{"200"===e.data.r?t({type:"LIST_USER",payload:e.data.atom,filParam:n}):"401"===e.data.r&&t({type:"ERROR"})})},saveData:e=>t=>{t(te());const a={x:"101",id:"0",key:`${ee}`,Name:e.Name,Description:e.Description,BranchID:e.BranchID,SalesID:e.SalesID,Active:"A"};J.a.post(`${X.API}:acl:user`,a).then(e=>{"200"===e.data.r?t({type:"SAVE_USER",payload:e.data}):"401"===e.data.r&&t(ae(e.data.m))})},showData:e=>(()=>{var t=Z(function*(t){t(te());const a={x:"50",id:e,key:`${ee}`};yield J.a.post(`${X.API}:acl:user`,a).then(function(e){"200"===e.data.r?t({type:"SHOW_USER",payload:e.data.atom.data}):"401"===e.data.r&&t(ae(e.data.m))})});return function(e){return t.apply(this,arguments)}})(),updateData:(e,t)=>a=>{a(te());const n={x:"101",id:e,key:`${ee}`,Name:t.Name,Description:t.Description,BranchID:t.BranchID,SalesID:t.SalesID};J.a.post(`${X.API}:acl:user`,n).then(e=>{"200"===e.data.r?a({type:"UPDATE_USER",payload:e.data}):"401"===e.data.r&&a(ae(e.data.m))})},deleteData:e=>t=>{t(te());const a={x:"201",id:e,key:`${ee}`};J.a.post(`${X.API}:acl:user`,a).then(e=>{"200"===e.data.r?t({type:"DELETE_USER",payload:e.data}):"401"===e.data.r&&t(ae(e.data.m))})}})(Object(ie.a)({columns:de.columns,dataTable:de.dataTable,headTitle:"User Management"})(p.a.create()(de)))},qvGC:function(e,t,a){"use strict";a.d(t,"b",function(){return p}),a.d(t,"c",function(){return u}),a.d(t,"e",function(){return d}),a.d(t,"d",function(){return m}),a.d(t,"a",function(){return h});var n=a("zr5I"),r=a.n(n),s=a("iho4");function i(e){return function(){var t=e.apply(this,arguments);return new Promise(function(e,a){return function n(r,s){try{var i=t[r](s),o=i.value}catch(e){return void a(e)}if(!i.done)return Promise.resolve(o).then(function(e){n("next",e)},function(e){n("throw",e)});e(o)}("next")})}}const o=localStorage.getItem("key"),c=()=>(()=>{var e=i(function*(e){e({type:"DATA_REQUEST"})});return function(t){return e.apply(this,arguments)}})(),l=e=>t=>{t({type:"ERROR",payload:e})},p=e=>t=>{t(c());const a={x:"1",key:`${o}`},n=Object.assign({},a,e);r.a.post(`${s.API}:acl:group`,n).then(e=>{"200"===e.data.r?t({type:"LIST_USER_GROUP",payload:e.data.atom,filParam:n}):"401"===e.data.r&&t(l(e.data.m))})},u=e=>t=>{t(c());const a={x:"101",id:"0",key:`${o}`,Name:e.Name,Description:e.Description,Active:"A"};r.a.post(`${s.API}:acl:group`,a).then(e=>{"200"===e.data.r?t({type:"SAVE_USER_GROUP",payload:e.data}):"401"===e.data.r&&t(l(e.data.m))})},d=(e,t)=>a=>{a(c());const n={x:"101",id:e,key:`${o}`,Name:t.Name,Description:t.Description};r.a.post(`${s.API}:acl:group`,n).then(e=>{"200"===e.data.r?a({type:"UPDATE_USER_GROUP",payload:e.data}):"401"===e.data.r&&a(l(e.data.m))})},m=e=>(()=>{var t=i(function*(t){t(c());const a={x:"50",id:e,key:`${o}`};yield r.a.post(`${s.API}:acl:group`,a).then(function(e){"200"===e.data.r?t({type:"SHOW_USER_GROUP",payload:e.data.atom.data}):"401"===e.data.r&&t(l(e.data.m))})});return function(e){return t.apply(this,arguments)}})(),h=e=>t=>{t(c());const a={x:"201",id:e,key:`${o}`};r.a.post(`${s.API}:acl:group`,a).then(e=>{"200"===e.data.r?t({type:"DELETE_USER_GROUP",payload:e.data}):"401"===e.data.r&&t(l(e.data.m))})}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,